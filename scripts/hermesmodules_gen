#!/usr/bin/env python3

import click
import shutil
from pathlib import Path
from rich.console import Console

from daqconf.core.conf_utils import make_app_command_data
from daqconf.core.config_file import generate_cli_from_schema
from daqconf.core.metadata import write_metadata_file, write_config_file
from daqconf.core.system import System

import daqconf.detreadoutmap as dromap

console = Console()

# Set moo schema search path
from dunedaq.env import get_moo_model_path
import moo.io
moo.io.default_load_path = get_moo_model_path()

CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])
@click.command(context_settings=CONTEXT_SETTINGS)
@generate_cli_from_schema('hermesmodules/confgen.jsonnet', 'hermesmodules_gen')
@click.option('--force-pm', default=None, type=click.Choice(['ssh', 'k8s']), help="Force process manager")
@click.option('-m', '--detector-readout-map-file', default=None, help="File containing detector detector-readout map for configuration to run")
@click.option('-a', '--check-args-and-exit', default=False, is_flag=True, help="Check input arguments and quit")
@click.option('-n', '--dry-run', default=False, is_flag=True, help="Dry run, do not generate output files")
@click.option('-f', '--force', default=False, is_flag=True, help="Force configuration generation - delete ")
@click.option('--debug', default=False, is_flag=True, help="Switch to get a lot of printout and dot files")
@click.argument('json_dir', type=click.Path())
def cli(
    config,
    force_pm,
    detector_readout_map_file,
    check_args_and_exit,
    dry_run,
    force,
    debug,
    json_dir
    ):

    if check_args_and_exit:
        return
    
    output_dir = Path(json_dir)
    if output_dir.exists():
        if dry_run:
            pass
        elif force:
            console.log(f"Removing existing {output_dir}")
            # Delete output folder if it exists
            shutil.rmtree(output_dir)
        else:
            raise RuntimeError(f"Directory {output_dir} already exists")

    debug_dir = output_dir / 'debug'
    if debug:
        debug_dir.mkdir(parents=True)

    config_data = config[0]
    config_file = Path(config[1] if config[1] is not None else "hermes_conf.json")

    #console.log(f"\nTotal configuration for this app before any overrides: {config_data.pod()}")

    # Get our config objects
    # Loading this one another time... (first time in config_file.generate_cli_from_schema)    

    moo.otypes.load_types('hermesmodules/confgen.jsonnet')
    import dunedaq.hermesmodules.confgen as confgen
    moo.otypes.load_types('daqconf/confgen.jsonnet')
    import dunedaq.daqconf.bootgen as bootgen

    console.log(f"\nIndividual configuration records before any command line overrides: ")    

    # Copy-of-a-hack, see daqconf's daqconf_multiru_gen file (commit e26a21d54fc5)
    boot = bootgen.boot(**config_data.boot)
    console.log(f"boot configuration object: {boot.pod()}")

    hermesmodules = confgen.hermesmodules(**config_data.hermesmodules)
    console.log(f"hermesmodules configuration object: {hermesmodules.pod()}")

    # Update with command-line options
    if force_pm is not None:
        boot.process_manager = force_pm
        console.log(f"boot.boot.process_manager set to {boot.process_manager}")

    console.log(f"\nIndividual configuration records after any command line overrides: ")
    console.log(f"boot configuration object: {boot.pod()}")
    console.log(f"hermesmodules configuration object: {hermesmodules.pod()}")	

    console.log("Loading hermesmodulesapp config generator")
    from hermesmodules import hermescoreapp_gen
    
    dro_map = dromap.DetReadoutMapService()
    dro_map.load(detector_readout_map_file)

    the_system = System()
    
    the_system.apps["hermes"] = hermescoreapp_gen.get_hermescore_app(
        name = "hermes",
        host = hermesmodules.host_hermes,
        addrtab = hermesmodules.addrtab,
        dro_map=dro_map
    )

    ####################################################################                                  
    # Application command data generation                                                                 
    ####################################################################                                  

    # Arrange per-app command data into the format used by util.write_json_files()    

    app_command_datas = {
        name : make_app_command_data(the_system, app, name)
        for name, app in the_system.apps.items()
    }

    # Make boot.json config                                                                               
    from daqconf.core.conf_utils import make_system_command_datas, write_json_files
    system_command_datas = make_system_command_datas(boot, the_system, verbose = False)

    write_json_files(app_command_datas, system_command_datas, json_dir, verbose=True)

    console.log(f"hermesmodules app config generated in {json_dir}")

    write_metadata_file(json_dir, "hermesmodules_gen", config_file.as_posix())
    write_config_file(
        output_dir,
        config_file.name if config_file else "default.json",
        config_data
    )
    
    if debug:
        for name in the_system.apps:
            the_system.apps[name].export(debug_dir / f"{name}.dot")

if __name__ == "__main__":
    try:
        cli(show_default=True, standalone_mode=True)
    except Exception:
        console.print_exception()
